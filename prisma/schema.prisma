generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      Int       @id @default(autoincrement())
  courses                 Course[]
  REGION                  String
  PARENT_GROUP_NAME       String    @map("PARENT GROUP NAME")
  DEALER_CODE             String    @map("DEALER CODE")
  DEALER_NAME             String    @map("DEALER NAME")
  DEALER_STATE            String    @map("DEALER STATE")
  DEALER_CITY             String    @map("DEALER CITY")
  EMPLOYEE_FIRSTNAME      String    @map("EMPLOYEE FIRSTNAME")
  EMPLOYEE_LASTNAME       String    @map("EMPLOYEE LASTNAME")
  DESIGNATION             String
  DESIGNATION_DESCRIPTION String    @map("DESIGNATION DESCRIPTION")
  MSPIN_NO                Int       @map("MSPIN NO")
  GENDER                  String
  EMPLOYEE_DOJ            String    @map("EMPLOYEE DOJ")
  EMPLOYEE_DOL            String    @map("EMPLOYEE DOL")
  EMPLOYEE_MOBILE_NO      String    @map("EMPLOYEE MOBILE NO")
  EMPLOYEE_TYPE           String    @map("EMPLOYEE TYPE")
  created_at              DateTime  @default(now())
  updated_at              DateTime  @updatedAt
}
model Admin {
  id       Int    @id @default(autoincrement())
  email    String @unique
  password String
}

model Course {
  id          Int          @id @default(autoincrement())
  category    String
  module_name String
  videoLink   String?
  content     String
  duration    String
  user        User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int?         @map("user_id")
  problems    Problem[]
  components  Component[]
  createdAt   DateTime     @default(now()) 
  updatedAt   DateTime     @default(now()) 
}

model Problem {
  id                Int                @id @default(autoincrement())
  name              String
  description       String?
  course            Course?            @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId          Int?               @map("course_id")
  componentProblems ComponentProblem[]
}

model Component {
  id                Int                @id @default(autoincrement())
  name              String
  description       String?
  course            Course?            @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId          Int?               @map("course_id")
  componentProblems ComponentProblem[]
}

model ComponentProblem {
  id          Int        @id @default(autoincrement())
  problem     Problem    @relation(fields: [problemId], references: [id], onDelete: Cascade)
  problemId   Int        @map("problem_id")
  component   Component  @relation(fields: [componentId], references: [id], onDelete: Cascade)
  componentId Int        @map("component_id")
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @default(now()) @map("updated_at")
}

model Adds {
  id    Int    @id @default(autoincrement())
  image String
}
